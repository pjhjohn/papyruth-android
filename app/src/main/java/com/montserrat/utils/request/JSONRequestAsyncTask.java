package com.montserrat.utils.request;

import android.os.AsyncTask;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;

public class JSONRequestAsyncTask extends AsyncTask<String, Void, JSONRequestAsyncTask.Response> {
    private final JSONRequestForm.OnResponse receiver;
    private final String endpoint;
    private final JSONObject jsonData;
    private final int timeout;
    private HttpClient client;
    private HttpPost request;

    public JSONRequestAsyncTask(JSONRequestForm.OnResponse receiver, String endpoint, JSONObject json, int timeout) {
        /* Essential Requirements for http request */
        this.receiver = receiver;
        this.endpoint = endpoint;
        this.jsonData = json;
        this.timeout  = timeout;
    }

    public void submit() throws JSONException, UnsupportedEncodingException {
        this.build();  // throws UnsupportedEncodingException
        this.execute();
    }

    private void build() throws UnsupportedEncodingException {
        /* Encode JSON data for request*/
        this.request = new HttpPost(this.endpoint);
        StringEntity se = new StringEntity(this.jsonData.toString(), HTTP.UTF_8);
        se.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE, "application/json"));
        this.request.setEntity(se);

        /* Set Timeout Parameters */
        final HttpParams httpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpParams, this.timeout); // Connection Timeout
        HttpConnectionParams.setSoTimeout(httpParams, this.timeout);         // Socket Timeout

        /* Build HttpClient*/
        this.client  = new DefaultHttpClient(httpParams);
    }


    @Override
    protected Response doInBackground(String... params) { /* Runs in a separate thread generated by AsyncTask<~> */
        Response response = new Response();
        try {
            response.status = Response.Status.SUCCESS;
            response.body = EntityUtils.toString(this.client.execute(this.request).getEntity());
        } catch(ConnectTimeoutException | SocketTimeoutException e){
            response.status = Response.Status.TIMEOUT;
            response.body = e.getMessage();
        } catch(UnknownHostException e) {
            response.status = Response.Status.NO_CONNECTION;
            response.body = e.getMessage();
        } catch(IOException e) { // includes handling ClientProtocolException
            response.status = Response.Status.ERROR;
            response.body = e.getMessage();
        }
        return response;
    }

    @Override
    protected void onPostExecute(Response response) {
        switch(response.status) {
            case SUCCESS:
                this.receiver.onSuccess(response.body);
                break;
            case ERROR:
                break;
            case NO_CONNECTION:
                this.receiver.onNoInternetConnection(response.body);
                break;
            case TIMEOUT:
                this.receiver.onTimeout(response.body);
                break;
        }
    }
    @Override
    protected void onCancelled() {
        this.receiver.onCanceled();
    }

    public static class Response {
        public static enum Status {
            SUCCESS, ERROR, TIMEOUT, NO_CONNECTION
        }
        public Status status = null;
        public String body = null;
    }
}
